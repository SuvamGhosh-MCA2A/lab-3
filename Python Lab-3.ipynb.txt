{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> **1) Write a function called check-season, it takes a month parameter\n",
    "> and returns the** **season: Autumn, Winter, Spring or Summer.**\n",
    ">\n",
    "> **def findseason (M) :**  \n",
    "> **list1 = \\[\\[12 , 1 , 2\\], \\[3 , 4 , 5\\],**  \n",
    "> **\\[6 , 7 , 8\\], \\[9 , 10 , 11\\]\\]** **if M in list1\\[0\\] :**  \n",
    "> **print ( \"WINTER\" )**  \n",
    "> **elif M in list1\\[1\\] :**  \n",
    "> **print ( \"SPRING\" )**  \n",
    "> **elif M in list1\\[2\\] :**  \n",
    "> **print ( \"SUMMER\" )**  \n",
    "> **elif M in list1\\[3\\] :**  \n",
    "> **print ( \"AUTUMN\" )**  \n",
    "> **else :**  \n",
    "> **print ( \"Invalid Month Number\" ) M = 5**  \n",
    "> **print(\"For Month number:\", M);**  \n",
    "> **findseason ( M )**  \n",
    "> **M = 10**  \n",
    "> **print(\"For Month number:\", M);**  \n",
    "> **findseason ( M )**\n",
    ">\n",
    "> **<u>O UTPUT-</u>**  \n",
    "> **For Month number: 5**  \n",
    "> **SPRING**  \n",
    "> **For Month number: 10**  \n",
    "> **AUTUMN**  \n",
    "> **2) Write a function called calculate_slope which return the slope of\n",
    "> a linear equation.**\n",
    ">\n",
    "> **def calculate_slope(x1, y1, x2, y2):**  \n",
    "> **if x1 == x2:**  \n",
    "> **return \"Slope is undefined (vertical line).\"**  \n",
    "> **slope = (y2 - y1) / (x2 - x1)**  \n",
    "> **return slope**  \n",
    "> **x1, y1 = 1, 2**  \n",
    "> **x2, y2 = 3, 6**  \n",
    "> **slope = calculate_slope(x1, y1, x2, y2)**  \n",
    "> **print(f\"The slope of the line through points ({x1}, {y1}) and ({x2},\n",
    "> {y2}) is: {slope}\")**\n",
    ">\n",
    "> **<u>O UTPUT-</u>**\n",
    ">\n",
    "> **The slope of the line through points (1, 2) and (3, 6) is: 2.0**\n",
    ">\n",
    "> **3) Quadratic equation is calculated as follows: ax² + bx + c = 0.**\n",
    ">\n",
    "> **Write a function which calculates solution set of a quadratic\n",
    "> equation, \\_solve_quadratic_eqn\\_.**\n",
    ">\n",
    "> **import cmath**  \n",
    "> **def solve_quadratic_eqn(a, b, c):**  \n",
    "> **discriminant = b\\*\\*2 - 4\\*a\\*c**  \n",
    "> **sol1 = (-b + cmath.sqrt(discriminant)) / (2\\*a)**  \n",
    "> **sol2 = (-b - cmath.sqrt(discriminant)) / (2\\*a)**  \n",
    "> **return sol1, sol2**  \n",
    "> **a, b, c = 1, -3, 2**  \n",
    "> **solutions = solve_quadratic_eqn(a, b, c)**  \n",
    "> **print(f\"The solutions of the quadratic equation {a}x² + {b}x + {c} =\n",
    "> 0 are: {solutions\\[0\\]} and {solutions\\[1\\]}\")**  \n",
    "> **<u>O UTPUT-</u>**  \n",
    "> **The solutions of the quadratic equation 1x² + -3x + 2 = 0 are:\n",
    "> (2+0j) and (1+0j)**\n",
    "\n",
    "**4) Declare a function named print_list. It takes a list as a parameter\n",
    "and it prints out each**\n",
    "\n",
    "> **element of the list.**\n",
    ">\n",
    "> **def print_list(input_list):**\n",
    ">\n",
    "> **for element in input_list:**\n",
    ">\n",
    "> **print(element)**\n",
    ">\n",
    "> **example_list = \\[1, 2, 3, 4, 5\\]**\n",
    ">\n",
    "> **print_list(example_list)**\n",
    ">\n",
    "> **<u>O UTPUT-</u>**\n",
    ">\n",
    "> **1**\n",
    ">\n",
    "> **2**\n",
    ">\n",
    "> **3**\n",
    ">\n",
    "> **4**\n",
    ">\n",
    "> **5**\n",
    ">\n",
    "> **5**) **Declare a function named reverse_list. It takes an array as a\n",
    "> parameter and it returns the**\n",
    ">\n",
    "> **reverse of the array (use loops).**\n",
    ">\n",
    "> **def reverse_list(input_list):**\n",
    ">\n",
    "> **reversed_list = \\[\\]**\n",
    ">\n",
    "> **for i in range(len(input_list) - 1, -1, -1):**  \n",
    "> **reversed_list.append(input_list\\[i\\])**  \n",
    "> **return reversed_list**  \n",
    "> **example_list = \\[1, 2, 3, 4, 5\\]**\n",
    ">\n",
    "> **reversed_list = reverse_list(example_list)**  \n",
    "> **print(f\"Original list: {example_list}\")**  \n",
    "> **print(f\"Reversed list: {reversed_list}\")**\n",
    ">\n",
    "> **<u>O UTPUT-</u>**  \n",
    "> **<u>O r i gin al l i st: \\[1, 2, 3, 4, 5\\]</u>**  \n",
    "> **<u>Reversed l i st: \\[5, 4, 3, 2, 1\\]</u>**  \n",
    "> **6) Compute the sum up to n terms in the series**  \n",
    "> **1 - 1/2 + 1/3 - 1/4 + 1/5 -... 1/n where n is a positive integer and\n",
    "> input by user.**\n",
    ">\n",
    "> **def compute_series_sum(n):**\n",
    ">\n",
    "> **sum = 0.0**  \n",
    "> **for i in range(1, n + 1):**  \n",
    "> **if i % 2 == 0:**  \n",
    "> **sum -= 1 / i**  \n",
    "> **else:**\n",
    ">\n",
    "> **sum += 1 / i**  \n",
    "> **return sum**\n",
    ">\n",
    "> **try:**  \n",
    "> **n = int(input(\"Enter a positive integer n: \"))**  \n",
    "> **if n \\<= 0:**  \n",
    "> **print(\"Please enter a positive integer.\")**  \n",
    "> **else:**  \n",
    "> **series_sum = compute_series_sum(n)**  \n",
    "> **print(f\"The sum of the series up to {n} terms is: {series_sum}\")\n",
    "> except ValueError:**  \n",
    "> **print(\"Invalid input! Please enter a positive integer.\")**\n",
    ">\n",
    "> **O**  \n",
    "> **<u>UTPUT-</u>**  \n",
    "> **Enter a positive integer n: 14**  \n",
    "> **The sum of the series up to 14 terms is: 0.6587051837051838**  \n",
    "> **7. Write a program to compute sin x for given x. The user should\n",
    "> supply x and a positive integer n. We compute the sine of x using the\n",
    "> series and the computation should use all terms in the series up\n",
    "> through the term involving xn**  \n",
    "> **sin x = x - x3/3! + x5/5! - x7/7! + x9/9! ........**\n",
    ">\n",
    "> **import math**\n",
    ">\n",
    "> **def factorial(n):**  \n",
    "> **if n == 0:**  \n",
    "> **return 1**  \n",
    "> **else:**\n",
    ">\n",
    "> **return n \\* factorial(n-1)**  \n",
    "> **def compute_sin(x, n):**  \n",
    "> **sin_x = 0.0**  \n",
    "> **for i in range(n + 1):**  \n",
    "> **term = ((-1)\\*\\*i \\* x\\*\\*(2\\*i + 1)) / factorial(2\\*i + 1)**\n",
    "> **sin_x += term**  \n",
    "> **return sin_x**\n",
    ">\n",
    "> **try:**  \n",
    "> **x = float(input(\"Enter the value of x (in radians): \"))**  \n",
    "> **n = int(input(\"Enter a positive integer n: \"))**  \n",
    "> **if n \\< 0:**  \n",
    "> **print(\"Please enter a positive integer for n.\")**  \n",
    "> **else:**  \n",
    "> **sin_x = compute_sin(x, n)**  \n",
    "> **print(f\"The computed value of sin({x}) using the series up to the\n",
    "> term involving x^{2\\*n + 1} is: {sin_x}\")**  \n",
    "> **print(f\"The actual value of sin({x}) using math.sin is:\n",
    "> {math.sin(x)}\")**  \n",
    "> **except ValueError:**\n",
    ">\n",
    "> **print(\"Invalid input! Please enter valid numbers.\")**  \n",
    "> **<u>O UTPUT-</u>**  \n",
    "> **<u>Enter th e valu e of x (i n rad i an s): 45</u>**  \n",
    "> **<u>Enter a p osi ti ve i nteger n : 24</u>**  \n",
    "> **T h e compu ted valu e of si n (45. 0) usi n g th e seri es u p to\n",
    "> th e ter m i nvol vin g <u>x^ 49 i s: </u>**  \n",
    "> **<u>7. 5489 6732 923 731 e+1 7</u>**  \n",
    "> **<u>T h e act u al val u e of si n (45. 0) usi n g math .si n i s:\n",
    "> 0.85 0903 5245 341 184</u> 8) Write a program to compute cosine of x.\n",
    "> The user should supply x and a positive integer n. We compute the\n",
    "> cosine of x using the series and the computation should use all terms\n",
    "> in the series up through the term involving xn**  \n",
    "> **cos x = 1 - x2/2! + x4/4! - x6/6! ....**\n",
    ">\n",
    "> **import math**\n",
    ">\n",
    "> **def factorial(n):**  \n",
    "> **if n == 0:**  \n",
    "> **return 1**  \n",
    "> **else:**\n",
    ">\n",
    "> **return n \\* factorial(n-1)**  \n",
    "> **def compute_cos(x, n):**  \n",
    "> **cos_x = 0.0**  \n",
    "> **for i in range(n + 1):**  \n",
    "> **term = ((-1)\\*\\*i \\* x\\*\\*(2\\*i)) / factorial(2\\*i)**  \n",
    "> **cos_x += term**  \n",
    "> **return cos_x**\n",
    ">\n",
    "> **try:**  \n",
    "> **x = float(input(\"Enter the value of x (in radians): \"))** **n =\n",
    "> int(input(\"Enter a positive integer n: \"))**  \n",
    "> **if n \\< 0:**  \n",
    "> **print(\"Please enter a positive integer for n.\")** **else:**  \n",
    "> **cos_x = compute_cos(x, n)**\n",
    ">\n",
    "> **print(f\"The computed value of cos({x}) using the series up to the\n",
    "> term involving x^{2\\*n} is: {cos_x}\")**  \n",
    "> **print(f\"The actual value of cos({x}) using math.cos is:\n",
    "> {math.cos(x)}\")**  \n",
    "> **except ValueError:**  \n",
    "> **print(\"Invalid input! Please enter valid numbers.\")**  \n",
    "> **<u>O UTPUT-</u>**  \n",
    "> **Enter a positive integer n: 12**  \n",
    "> **The computed value of cos(90.0) using the series up to the term\n",
    "> involving x^24 is: 1.2027840699335446e+23**  \n",
    "> **The actual value of cos(90.0) using math.cos is:\n",
    "> -0.4480736161291701**  \n",
    "> **9) Print the pattern upto N Lines:**  \n",
    "> **.**\n",
    ">\n",
    "> **/\\_\\\\ ./ \\\\**  \n",
    "> **/ \\\\ . / \\\\**  \n",
    "> **/ \\\\**  \n",
    "> **/ \\\\**\n",
    "\n",
    "**N=2 N=3 N=4**  \n",
    "**def print_pattern(N):**\n",
    "\n",
    "> **if N \\< 1:**  \n",
    "> **print(\"Please enter a positive integer for N.\")** **return**  \n",
    "> **for i in range(1, N + 1):**  \n",
    "> **print(\" \" \\* (N - i) + \".\")**  \n",
    "> **for j in range(1, i + 1):**\n",
    ">\n",
    "> **print(\" \" \\* (N - i) + \"/\" + \" \" \\* (2 \\* j - 1) + \"\\\\\\\\\")**\n",
    "> **print(\" \" \\* (N - i) + \"/\" + \"\\_\" \\* (2 \\* i - 1) + \"\\\\\\\\\") try:**  \n",
    "> **N = int(input(\"Enter a positive integer N: \"))**  \n",
    "> **print_pattern(N)**\n",
    ">\n",
    "> **except ValueError:**  \n",
    "> **print(\"Invalid input! Please enter a positive integer.\") <u>O UTPUT-\n",
    "> </u>**  \n",
    "> **Enter a positive integer N: 2**  \n",
    "> **.**\n",
    ">\n",
    "> **/ \\\\ .**\n",
    ">\n",
    "> **/\\_\\\\ / \\\\**  \n",
    "> **/ \\\\**  \n",
    "> **/ \\\\**  \n",
    "> **10. Print a number as a 8 segment display N Lines:**\n",
    ">\n",
    "> **\\_**  \n",
    "> **\\_\\|**  \n",
    "> **\\|\\_**  \n",
    "> **\\_**  \n",
    "> **\\_\\|**  \n",
    "> **\\_\\|**  \n",
    "> **\\|\\_\\|**  \n",
    "> **\\|**  \n",
    "> **N=2 N=3 N=4**  \n",
    "> **def print_segment(number, N):**\n",
    ">\n",
    "> **segments = {**  \n",
    "> **'0': \\[' \\_ ', '\\| \\|', '\\|\\_\\|'\\],**  \n",
    "> **'1': \\[' ', ' \\|', ' \\|'\\],**  \n",
    "> **'2': \\[' \\_ ', ' \\_\\|', '\\|\\_ '\\],**  \n",
    "> **'3': \\[' \\_ ', ' \\_\\|', ' \\_\\|'\\],**  \n",
    "> **'4': \\[' ', '\\|\\_\\|', ' \\|'\\],**  \n",
    "> **'5': \\[' \\_ ', '\\|\\_ ', ' \\_\\|'\\],**  \n",
    "> **'6': \\[' \\_ ', '\\|\\_ ', '\\|\\_\\|'\\],**\n",
    ">\n",
    "> **'7': \\[' \\_ ', ' \\|', ' \\|'\\],**  \n",
    "> **'8': \\[' \\_ ', '\\|\\_\\|', '\\|\\_\\|'\\],**  \n",
    "> **'9': \\[' \\_ ', '\\|\\_\\|', ' \\_\\|'\\]**  \n",
    "> **}**  \n",
    "> **if N == 2:**  \n",
    "> **scale = {**  \n",
    "> **' \\_ ': ' \\_ ',**  \n",
    "> **'\\|\\_\\|': '\\_\\|',**  \n",
    "> **'\\| \\|': '\\|\\_',**  \n",
    "> **' \\|': ' \\|',**  \n",
    "> **' \\_\\|': ' \\_\\|',**  \n",
    "> **'\\|\\_ ': '\\|\\_ ',**  \n",
    "> **' \\|': ' \\|',**  \n",
    "> **' ': ' '**  \n",
    "> **}**  \n",
    "> **segments = {key: \\[scale\\[seg\\] for seg in value\\] for key, value in\n",
    "> segments.items()} elif N == 3:**  \n",
    "> **scale = {**  \n",
    "> **' \\_ ': ' \\_ ',**  \n",
    "> **'\\|\\_\\|': ' \\_\\|',**  \n",
    "> **'\\| \\|': '\\|\\_ ',**  \n",
    "> **' \\|': ' \\|',**  \n",
    "> **' \\_\\|': ' \\_\\|',**  \n",
    "> **'\\|\\_ ': '\\|\\_ ',**  \n",
    "> **' \\|': ' \\|',**  \n",
    "> **' ': ' '**  \n",
    "> **}**  \n",
    "> **segments = {key: \\[scale\\[seg\\] for seg in value\\] for key, value in\n",
    "> segments.items()} elif N == 4:**\n",
    ">\n",
    "> **\\# For N=4, the same segments are used, but you can adjust scaling\n",
    "> if needed segments = {**\n",
    ">\n",
    "> **'0': \\[' \\_ ', '\\| \\|', '\\|\\_\\|'\\],**  \n",
    "> **'1': \\[' ', ' \\|', ' \\|'\\],**  \n",
    "> **'2': \\[' \\_ ', ' \\_\\|', '\\|\\_ '\\],**  \n",
    "> **'3': \\[' \\_ ', ' \\_\\|', ' \\_\\|'\\],**  \n",
    "> **'4': \\[' ', '\\|\\_\\|', ' \\|'\\],**  \n",
    "> **'5': \\[' \\_ ', '\\|\\_ ', ' \\_\\|'\\],**  \n",
    "> **'6': \\[' \\_ ', '\\|\\_ ', '\\|\\_\\|'\\],**  \n",
    "> **'7': \\[' \\_ ', ' \\|', ' \\|'\\],**  \n",
    "> **'8': \\[' \\_ ', '\\|\\_\\|', '\\|\\_\\|'\\],**  \n",
    "> **'9': \\[' \\_ ', '\\|\\_\\|', ' \\_\\|'\\]**  \n",
    "> **}**  \n",
    "> **num_str = str(number)**  \n",
    "> **lines = \\['' for \\_ in range(N)\\]**  \n",
    "> **for digit in num_str:**\n",
    ">\n",
    "> **seg = segments\\[digit\\]**  \n",
    "> **for i in range(N):**  \n",
    "> **lines\\[i\\] += seg\\[i\\] + ' '**  \n",
    "> **for line in lines:**\n",
    ">\n",
    "> **print(line)**  \n",
    "> **N = int(input(\"Enter the number of lines (2, 3, or 4): \")) number =\n",
    "> input(\"Enter the number to display: \")**  \n",
    "> **print_segment(number, N)**\n",
    ">\n",
    "> **<u>O UTPUT-</u>**  \n",
    "> **Enter the number of lines (2, 3, or 4): 3**  \n",
    "> **Enter the number to display: 3 \\_**  \n",
    "> **\\_\\|**  \n",
    "> **\\_\\|**\n",
    ">\n",
    "> **11. Print the pattern upto N lines:**  \n",
    "> **1 2**  \n",
    "> **4 3**\n",
    ">\n",
    "> **1 2 3**  \n",
    "> **8 9 4**  \n",
    "> **7 6 5**\n",
    ">\n",
    "> **1 2 3 4**  \n",
    "> **12 13 14 5**  \n",
    "> **11 16 15 6**  \n",
    "> **10 9 8 7**  \n",
    "> **N=2 N=3 N=4**  \n",
    "> **def print_spiral(n):**\n",
    ">\n",
    "> **matrix = \\[\\[0\\] \\* n for \\_ in range(n)\\]**  \n",
    "> **num = 1**  \n",
    "> **top, bottom, left, right = 0, n - 1, 0, n - 1**  \n",
    "> **while top \\<= bottom and left \\<= right:**\n",
    ">\n",
    "> **for i in range(left, right + 1):**  \n",
    "> **matrix\\[top\\]\\[i\\] = num**  \n",
    "> **num += 1**\n",
    ">\n",
    "> **top += 1**  \n",
    "> **for i in range(top, bottom + 1):**  \n",
    "> **matrix\\[i\\]\\[right\\] = num**  \n",
    "> **num += 1**\n",
    ">\n",
    "> **right -= 1**  \n",
    "> **for i in range(right, left - 1, -1):**  \n",
    "> **matrix\\[bottom\\]\\[i\\] = num**  \n",
    "> **num += 1**\n",
    ">\n",
    "> **bottom -= 1**  \n",
    "> **for i in range(bottom, top - 1, -1):**  \n",
    "> **matrix\\[i\\]\\[left\\] = num**  \n",
    "> **num += 1**\n",
    ">\n",
    "> **left += 1**  \n",
    "> **for row in matrix:**  \n",
    "> **print(' '.join(map(str, row)))**  \n",
    "> **N = int(input(\"Enter the number of lines (N): \"))**  \n",
    "> **print_spiral(N)**  \n",
    "> **<u>O UTPUT-</u>**  \n",
    "> **Enter the number of lines (N): 3**  \n",
    "> **1 2 3**  \n",
    "> **8 9 4**  \n",
    "> **7 6 5**  \n",
    "> **12. Write a python script that displays the following table 1 1 1 1\n",
    "> 1**  \n",
    "> **2 1 2 4 8**  \n",
    "> **3 1 3 9 27**  \n",
    "> **4 1 4 16 64**  \n",
    "> **5 1 5 25 125**  \n",
    "> **def display_table(rows, cols):**  \n",
    "> **header = \\[''\\] + \\[str(i) for i in range(1, cols + 1)\\]**  \n",
    "> **print(' '.join(header))**  \n",
    "> **for i in range(1, rows + 1):**  \n",
    "> **row = \\[str(i)\\] \\# Start with the row number**  \n",
    "> **for j in range(1, cols + 1):**\n",
    ">\n",
    "> **value = i \\*\\* j**  \n",
    "> **row.append(str(value))**\n",
    ">\n",
    "> **print(' '.join(row))**\n",
    ">\n",
    "> **rows = 5 cols = 5**  \n",
    "> **display_table(rows, cols)**\n",
    ">\n",
    "> **<u>O UTPUT-</u>**  \n",
    "> **1 2 3 4 5**  \n",
    "> **1 1 1 1 1 1**  \n",
    "> **2 2 4 8 16 32**  \n",
    "> **3 3 9 27 81 243**  \n",
    "> **4 4 16 64 256 1024**  \n",
    "> **5 5 25 125 625 3125**  \n",
    "> **MI SCELLA NEO US**  \n",
    "> **13) Write a Python program to calculate Sum & Average of an integer\n",
    "> array. def calculate_sum_and_average(arr):**\n",
    ">\n",
    "> **total_sum = sum(arr)**  \n",
    "> **if len(arr) \\> 0:**  \n",
    "> **average = total_sum / len(arr)**  \n",
    "> **else:**  \n",
    "> **average = 0**  \n",
    "> **return total_sum, average**  \n",
    "> **if \\_\\_name == \"\\_\\_main**  \n",
    "> **\":**\n",
    ">\n",
    "> **input_str = input(\"Enter integers separated by spaces: \")**\n",
    "> **try:**  \n",
    "> **num_list = \\[int(x) for x in input_str.split()\\]**  \n",
    "> **total_sum, average = calculate_sum_and_average(num_list)**\n",
    "> **print(f\"Sum: {total_sum}\")**  \n",
    "> **print(f\"Average: {average:.2f}\")**  \n",
    "> **except ValueError:**  \n",
    "> **print(\"Invalid input. Please enter only integers.\")**  \n",
    "> **<u>O UTPUT-</u>**\n",
    ">\n",
    "> **Enter integers separated by spaces: 10 20 30 40 50**  \n",
    "> **Sum: 150**  \n",
    "> **Average: 30.00**  \n",
    "> **14) Write a Python program to implement stack using array.**\n",
    ">\n",
    "> **class Stack:**  \n",
    "> **def init\\_\\_(self):**  \n",
    "> **self.stack = \\[\\]**  \n",
    "> **def push(self, value):**  \n",
    "> **self.stack.append(value)**  \n",
    "> **print(f\"Pushed {value} onto the stack.\")** **def pop(self):**  \n",
    "> **if not self.is_empty():**  \n",
    "> **value = self.stack.pop()**  \n",
    "> **print(f\"Popped {value} from the stack.\")** **return value**  \n",
    "> **else:**\n",
    ">\n",
    "> **print(\"Stack is empty, cannot pop.\")**  \n",
    "> **return None**  \n",
    "> **def peek(self):**\n",
    ">\n",
    "> **if not self.is_empty(): value =**  \n",
    "> **self.stack\\[-1\\] print(f\"Top**  \n",
    "> **item is {value}.\") return**  \n",
    "> **value**\n",
    ">\n",
    "> **else:**  \n",
    "> **print(\"Stack is empty.\")**  \n",
    "> **return None**  \n",
    "> **def is_empty(self):**\n",
    ">\n",
    "> **return len(self.stack) == 0**  \n",
    "> **def display(self):**\n",
    ">\n",
    "> **if not self.is_empty():**  \n",
    "> **print(\"Current stack:\", self.stack)**  \n",
    "> **else:**  \n",
    "> **print(\"Stack is empty.”)**  \n",
    "> **if \\_\\_name == \"\\_\\_main**  \n",
    "> **\": stack = Stack()**  \n",
    "> **stack.push(10)**  \n",
    "> **stack.push(20)**  \n",
    "> **stack.push(30)**  \n",
    "> **stack.display()**\n",
    ">\n",
    "> **stack.peek()**  \n",
    "> **stack.pop()**  \n",
    "> **stack.display()**  \n",
    "> **stack.peek()**  \n",
    "> **stack.pop()**  \n",
    "> **stack.pop()**  \n",
    "> **stack.pop()**\n",
    ">\n",
    "> **O**  \n",
    "> **<u>UTPUT-</u>**  \n",
    "> **Pushed 10 onto the stack.**  \n",
    "> **Pushed 20 onto the stack.**  \n",
    "> **Pushed 30 onto the stack.**  \n",
    "> **Current stack: \\[10, 20, 30\\]**  \n",
    "> **Top item is 30.**\n",
    ">\n",
    "> **Popped 30 from the stack.**  \n",
    "> **Current stack: \\[10, 20\\]**\n",
    ">\n",
    "> **Top item is 20.**\n",
    ">\n",
    "> **Popped 20 from the stack.**  \n",
    "> **Popped 10 from the stack.**  \n",
    "> **Stack is empty, cannot pop.**\n",
    ">\n",
    "> **15) Write a Python program to implement Queue using array. class\n",
    "> Queue:**\n",
    ">\n",
    "> **def init\\_\\_(self):**  \n",
    "> **self.queue = \\[\\]**  \n",
    "> **def enqueue(self, value):**  \n",
    "> **self.queue.append(value)**  \n",
    "> **print(f\"Enqueued {value}.\")**\n",
    ">\n",
    "> **def dequeue(self):**  \n",
    "> **if not self.is_empty():**  \n",
    "> **value = self.queue.pop(0)**  \n",
    "> **print(f\"Dequeued {value}.\")**  \n",
    "> **return value**\n",
    ">\n",
    "> **else:**  \n",
    "> **print(\"Queue is empty, cannot dequeue.\")** **return None**  \n",
    "> **def peek(self):**\n",
    ">\n",
    "> **if not self.is_empty(): value =**  \n",
    "> **self.queue\\[0\\] print(f\"Front**  \n",
    "> **item is {value}.\") return value**\n",
    ">\n",
    "> **else:**  \n",
    "> **print(\"Queue is empty.\")**  \n",
    "> **return None**  \n",
    "> **def is_empty(self):**\n",
    ">\n",
    "> **return len(self.queue) == 0**  \n",
    "> **def display(self):**\n",
    ">\n",
    "> **if not self.is_empty():**  \n",
    "> **print(\"Current queue:\", self.queue)**  \n",
    "> **else:**\n",
    ">\n",
    "> **print(\"Queue is empty”)**  \n",
    "> **if \\_\\_name == \"\\_\\_main**  \n",
    "> **\": queue = Queue()**  \n",
    "> **queue.enqueue(10)**  \n",
    "> **queue.enqueue(20)**  \n",
    "> **queue.enqueue(30)**  \n",
    "> **queue.display()**  \n",
    "> **queue.peek()**  \n",
    "> **queue.dequeue()**  \n",
    "> **queue.display()**  \n",
    "> **queue.peek()**  \n",
    "> **queue.dequeue()**  \n",
    "> **queue.dequeue()**  \n",
    "> **queue.dequeue()**\n",
    ">\n",
    "> **<u>O UTPUT-</u>**  \n",
    "> **Enqueued 10.**  \n",
    "> **Enqueued 20.**  \n",
    "> **Enqueued 30.**\n",
    ">\n",
    "> **Current queue: \\[10, 20, 30\\]**  \n",
    "> **Front item is 10.**\n",
    ">\n",
    "> **Dequeued 10.**\n",
    ">\n",
    "> **Current queue: \\[20, 30\\]**  \n",
    "> **Front item is 20.**\n",
    ">\n",
    "> **Dequeued 20.**\n",
    ">\n",
    "> **Dequeued 30.**\n",
    ">\n",
    "> **Queue is empty, cannot dequeue.**\n",
    ">\n",
    "> **16) Write a Python program to calculate Sum of two 2-dimensional\n",
    "> arrays.**\n",
    ">\n",
    "> **def add_matrices(matrix1, matrix2):**\n",
    ">\n",
    "> **if len(matrix1) != len(matrix2) or any(len(row1) != len(row2) for\n",
    "> row1, row2 in zip(matrix1, matrix2)):**\n",
    ">\n",
    "> **raise ValueError(\"Matrices must have the same dimensions.\")**\n",
    "> **result = \\[\\]**  \n",
    "> **for row1, row2 in zip(matrix1, matrix2):**  \n",
    "> **result_row = \\[elem1 + elem2 for elem1, elem2 in zip(row1, row2)\\]**\n",
    "> **result.append(result_row)**  \n",
    "> **return result**  \n",
    "> **def print_matrix(matrix):**  \n",
    "> **for row in matrix:**  \n",
    "> **print(' '.join(map(str, row)))**  \n",
    "> **if \\_\\_name == \"\\_\\_main \":**  \n",
    "> **matrix1 =**  \n",
    "> **\\[ \\[1, 2,**  \n",
    "> **3\\], \\[4, 5,**  \n",
    "> **6\\],**\n",
    ">\n",
    "> **\\[7, 8, 9\\]**  \n",
    "> **\\]**  \n",
    "> **matrix2 =**  \n",
    "> **\\[ \\[9, 8,**  \n",
    "> **7\\], \\[6, 5,**  \n",
    "> **4\\],**\n",
    ">\n",
    "> **\\[3, 2, 1\\]**  \n",
    "> **\\]**  \n",
    "> **try:**  \n",
    "> **sum_matrix = add_matrices(matrix1, matrix2)** **print(\"Sum of the\n",
    "> matrices:\")**  \n",
    "> **print_matrix(sum_matrix)**\n",
    ">\n",
    "> **except ValueError as e:**  \n",
    "> **print(e)**  \n",
    "> **<u>O UTPUT-</u>**  \n",
    "> **Sum of the matrices:**  \n",
    "> **10 10 10**\n",
    ">\n",
    "> **10 10 10**  \n",
    "> **10 10 10**  \n",
    "> **17) Write a Python program to find the range of a 1D array.**\n",
    ">\n",
    "> **def find_range(arr):**\n",
    ">\n",
    "> **if not arr:**  \n",
    "> **raise ValueError(\"Array is empty.\")**  \n",
    "> **min_value = min(arr)**  \n",
    "> **max_value = max(arr)**  \n",
    "> **range_value = max_value - min_value**  \n",
    "> **return range_value**\n",
    ">\n",
    "> **if \\_\\_name == \"\\_\\_main \":**  \n",
    "> **array = \\[5, 3, 9, 1, 6, 7\\]**  \n",
    "> **try:**  \n",
    "> **range_value = find_range(array)**  \n",
    "> **print(f\"The range of the array is: {range_value}\")**  \n",
    "> **except ValueError as e:**  \n",
    "> **print(e)**  \n",
    "> **<u>O UTPUT-</u>**  \n",
    "> **The range of the array is: 8**  \n",
    "> **18) Write a Python program to search an element in an array.**\n",
    ">\n",
    "> **def linear_search(arr, target):**\n",
    ">\n",
    "> **for index, value in enumerate(arr):**  \n",
    "> **if value == target:**  \n",
    "> **return index**  \n",
    "> **return -1**\n",
    ">\n",
    "> **if \\_\\_name == \"\\_\\_main \":**  \n",
    "> **array = \\[10, 23, 4, 56, 12, 78, 34\\]**  \n",
    "> **target = int(input(\"Enter the element to search for:)) index =\n",
    "> linear_search(array, target)**\n",
    ">\n",
    "> **if index != -1:**  \n",
    "> **print(f\"Element {target} found at index {index}.\")** **else:**  \n",
    "> **print(f\"Element {target} not found in the array.\") <u>O UTPUT-\n",
    "> </u>**  \n",
    "> **Enter the element to search for: 56**  \n",
    "> **Element 56 found at index 3.**\n",
    ">\n",
    "> **19) Write a Python program to find the sum of even numbers in an\n",
    "> integer array. def sum_of_even_numbers(arr):**\n",
    ">\n",
    "> **total_sum = 0**  \n",
    "> **for number in arr:**  \n",
    "> **if number % 2 == 0:**  \n",
    "> **total_sum += number**  \n",
    "> **return total_sum**\n",
    ">\n",
    "> **if \\_\\_name == \"\\_\\_main \":**  \n",
    "> **array = \\[10, 23, 4, 56, 12, 78, 34\\]**  \n",
    "> **even_sum = sum_of_even_numbers(array)**  \n",
    "> **print(f\"The sum of even numbers in the array is: {even_sum}\")**  \n",
    "> **<u>O UTPUT-</u>**  \n",
    "> **The sum of even numbers in the array is: 180**  \n",
    "> **20) Write a Python program to find the sum of diagonal elements in a\n",
    "> 2D array.**\n",
    ">\n",
    "> **def sum_of_diagonals(matrix):**\n",
    ">\n",
    "> **n = len(matrix)**  \n",
    "> **if any(len(row) != n for row in matrix):**  \n",
    "> **raise ValueError(\"Matrix must be square.\")**  \n",
    "> **primary_diagonal_sum = 0**  \n",
    "> **secondary_diagonal_sum = 0**\n",
    ">\n",
    "> **for i in range(n):**  \n",
    "> **primary_diagonal_sum += matrix\\[i\\]\\[i\\]**\n",
    ">\n",
    "> **secondary_diagonal_sum += matrix\\[i\\]\\[n - 1 - i\\]**  \n",
    "> **return primary_diagonal_sum, secondary_diagonal_sum def\n",
    "> print_matrix(matrix):**\n",
    ">\n",
    "> **for row in matrix:**  \n",
    "> **print(' '.join(map(str, row)))**  \n",
    "> **if \\_\\_name == \"\\_\\_main \":**  \n",
    "> **matrix =**  \n",
    "> **\\[ \\[1, 2,**  \n",
    "> **3\\], \\[4, 5,**  \n",
    "> **6\\],**\n",
    ">\n",
    "> **\\[7, 8, 9\\]**  \n",
    "> **\\] print(\"Matrix:\")**  \n",
    "> **print_matrix(matrix)**\n",
    ">\n",
    "> **primary_sum, secondary_sum = sum_of_diagonals(matrix) print(f\"Sum of\n",
    "> primary diagonal elements: {primary_sum}\") print(f\"Sum of secondary\n",
    "> diagonal elements: {secondary_sum}\")**\n",
    ">\n",
    "> **<u>O</u>**  \n",
    "> **<u>UTPUT-</u>**  \n",
    "> **Matrix:**\n",
    ">\n",
    "> **1 2 3**  \n",
    "> **4 5 6**  \n",
    "> **7 8 9**  \n",
    "> **Sum of primary diagonal elements: 15**  \n",
    "> **Sum of secondary diagonal elements: 15**  \n",
    "> **21)Write a Python Program Reverse the elements in an array of\n",
    "> integers without using a second array.**\n",
    ">\n",
    "> **def reverse_array(arr):**  \n",
    "> **start = 0**  \n",
    "> **end = len(arr) - 1**  \n",
    "> **while start \\< end:**\n",
    ">\n",
    "> **arr\\[start\\], arr\\[end\\] = arr\\[end\\], arr\\[start\\]**\n",
    ">\n",
    "> **start += 1**  \n",
    "> **end -= 1**\n",
    ">\n",
    "> **if \\_\\_name == \"\\_\\_main**  \n",
    "> **\": array = \\[1, 2, 3, 4, 5, 6,**  \n",
    "> **7\\] print(\"Original array:\")**  \n",
    "> **print(array)**  \n",
    "> **reverse_array(array)**  \n",
    "> **print(\"Reversed array:\")**  \n",
    "> **print(array)**\n",
    ">\n",
    "> **<u>O UTPUT-</u>**  \n",
    "> **Original array:**\n",
    ">\n",
    "> **\\[1, 2, 3, 4, 5, 6, 7\\]**  \n",
    "> **Reversed array:**  \n",
    "> **\\[7, 6, 5, 4, 3, 2, 1\\]**\n",
    ">\n",
    "> **22) Write a Python program to enter n elements in an array and find\n",
    "> smallest number among them.**\n",
    ">\n",
    "> **def find_smallest_number(arr):**  \n",
    "> **if not arr:**  \n",
    "> **raise ValueError(\"Array is empty.\")**  \n",
    "> **smallest = arr\\[0\\]**  \n",
    "> **for number in arr:**  \n",
    "> **if number \\< smallest:**  \n",
    "> **smallest = number**  \n",
    "> **return smallest**\n",
    ">\n",
    "> **if \\_\\_name == \"\\_\\_main \":**  \n",
    "> **n = int(input(\"Enter the number of elements: \"))** **if n \\<= 0:**  \n",
    "> **print(\"The number of elements must be positive.\")** **else:**  \n",
    "> **array = \\[\\]**\n",
    ">\n",
    "> **for i in range(n):**  \n",
    "> **element = int(input(f\"Enter element {i + 1}: \"))**  \n",
    "> **array.append(element)**  \n",
    "> **try:**  \n",
    "> **smallest_number = find_smallest_number(array)**  \n",
    "> **print(f\"The smallest number in the array is: {smallest_number}\")**\n",
    "> **except ValueError as e:**  \n",
    "> **print(e)**  \n",
    "> **<u>O UTPUT-</u>**  \n",
    "> **Enter the number of elements: 5**  \n",
    "> **Enter element 1: 10**  \n",
    "> **Enter element 2: 5**  \n",
    "> **Enter element 3: 8**  \n",
    "> **Enter element 4: 1**  \n",
    "> **Enter element 5: 7**  \n",
    "> **The smallest number in the array is: 1**"
   ],
   "id": "42a14256-91c8-446e-92a7-ab6bf11055d3"
  }
 ],
 "nbformat": 4,
 "nbformat_minor": 5,
 "metadata": {}
}
